package io.jenkins.plugins.analysis.warnings;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Comparator;

import org.junit.Test;

import io.jenkins.plugins.analysis.core.model.StaticAnalysisLabelProvider;
import io.jenkins.plugins.analysis.core.model.StaticAnalysisTool;
import io.jenkins.plugins.analysis.core.model.StaticAnalysisTool.StaticAnalysisToolDescriptor;
import io.jenkins.plugins.analysis.core.testutil.IntegrationTest;

/**
 * Utility to create a report with all available tools.
 *
 * @author Ullrich Hafner
 */ 
public class ToolsLister extends IntegrationTest {
    /**
     * Creates the TOOLS.md file, that lists all registered tools.
     * 
     * @throws IOException if hte file TOOLS.md cannot be written
     */
    @Test
    public void shouldPrintAllRegisteredTools() throws IOException {
        ArrayList<StaticAnalysisToolDescriptor> descriptors = new ArrayList<>(
                j.getInstance().getDescriptorList(StaticAnalysisTool.class));
        descriptors.sort(Comparator.comparing(d -> d.getLabelProvider().getName()));

        try (FileWriter fileWriter = new FileWriter("SUPPORTED-REPORT-FORMATS.md")) {
            PrintWriter file = new PrintWriter(fileWriter);
            file.printf("# DO NOT EDIT - Generated by %s at %s%n", getClass().getName(), LocalDateTime.now());
            file.print("| Number | ID | Icon | Name |\n");
            file.print("| --- | --- | --- | --- |\n");

            for (int i = 0; i < descriptors.size(); i++) {
                StaticAnalysisToolDescriptor descriptor = descriptors.get(i);
                file.printf("| %d | %s | %s | %s |%n", i, descriptor.getId(), getIcon(descriptor.getLabelProvider()), getName(descriptor));
            }
        }
    }

    private String getIcon(final StaticAnalysisLabelProvider labelProvider) {
        String icon = labelProvider.getSmallIconUrl();
        if (icon.contains("analysis-24x24.png")) {
            return "-";
        }
        return String.format("![%s](%s %s)", labelProvider.getName(), icon, labelProvider.getName());
    }

    private String getName(final StaticAnalysisToolDescriptor descriptor) {
        String name = descriptor.getLabelProvider().getName();
        String url = descriptor.getUrl();
        if (url.isEmpty()) {
            return name;
        }
        return String.format("[%s](%s)", name, url);
    }

}
