package io.jenkins.plugins.analysis.warnings;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Comparator;

import org.junit.Test;

import io.jenkins.plugins.analysis.core.model.StaticAnalysisLabelProvider;
import io.jenkins.plugins.analysis.core.model.StaticAnalysisTool;
import io.jenkins.plugins.analysis.core.model.StaticAnalysisTool.StaticAnalysisToolDescriptor;
import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerSuite;

/**
 * Utility to create a report with all available tools.
 *
 * @author Ullrich Hafner
 */
public class ToolsLister extends IntegrationTestWithJenkinsPerSuite {
    /**
     * Creates the TOOLS.md file, that lists all registered tools.
     *
     * @throws IOException
     *         if hte file TOOLS.md cannot be written
     */
    @Test
    public void shouldPrintAllRegisteredTools() throws IOException {
        ArrayList<StaticAnalysisToolDescriptor> descriptors = new ArrayList<>(
                getJenkins().getInstance().getDescriptorList(StaticAnalysisTool.class));
        descriptors.sort(Comparator.comparing(d -> d.getLabelProvider().getName()));

        try (FileWriter fileWriter = new FileWriter("SUPPORTED-FORMATS.md")) {
            PrintWriter file = new PrintWriter(fileWriter);
            file.printf("<!--- DO NOT EDIT - Generated by %s at %s-->%n", getClass().getName(), LocalDateTime.now());
            file.println("# Supported Report Formats\n"
                    + "\n"
                    + "Jenkins' warnings plug-in supports the following report formats. \n"
                    + "If your tool is not yet supported you can either define a new \n"
                    + "Groovy based parser in the user interface or provide a parser within a new small plug-in. \n"
                    + "If the parser is useful for \n"
                    + "other teams as well please share it and provide pull requests for the \n"
                    + "[warnings plug-in](https://github.com/jenkinsci/warnings-plugin/pulls) and \n"
                    + "the [analysis parsers library](https://github.com/jenkinsci/analysis-model/).  \n");
            file.print("| Number | ID | Icons | Name |\n");
            file.print("| --- | --- | --- | --- |\n");

            for (int i = 0; i < descriptors.size(); i++) {
                StaticAnalysisToolDescriptor descriptor = descriptors.get(i);
                final StaticAnalysisLabelProvider labelProvider = descriptor.getLabelProvider();
                file.printf("| %d | %s | %s | %s |%n",
                        i,
                        descriptor.getId(),
                        getIcon(labelProvider, labelProvider.getSmallIconUrl())
                                + " " + getIcon(labelProvider, labelProvider.getLargeIconUrl()),
                        getName(descriptor));
            }
        }
    }

    private String getIcon(final StaticAnalysisLabelProvider labelProvider, final String icon) {
        if (icon.matches(".*analysis-\\d\\dx\\d\\d.png")) {
            return "-";
        }
        return String.format("![%s](%s)", labelProvider.getName(),
                icon.replace("/plugin/warnings/", "src/main/webapp/"));
    }

    private String getName(final StaticAnalysisToolDescriptor descriptor) {
        String name = descriptor.getLabelProvider().getName();
        String url = descriptor.getUrl();
        if (url.isEmpty()) {
            return name;
        }
        return String.format("[%s](%s)", name, url);
    }

}
